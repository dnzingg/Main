-- Improved and fixed Luau script for "GG hub - Prison Life"
-- (No extra comments per your request; kept minimal and robust)

local success, Rayfield = pcall(function()
	return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)
if not success or not Rayfield then
	error("Failed to load Rayfield UI library.")
end

local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local TS = game:GetService("TweenService")
local Debris = game:GetService("Debris")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")

-- Character/humanoid state management
local character, humanoid, hrp
local defaultWalkSpeed = 24
local defaultJumpPower =  50

local function updateCharacterReferences(char)
	character = char
	humanoid = char and char:FindFirstChildWhichIsA("Humanoid")
	hrp = char and char:FindFirstChild("HumanoidRootPart")
	if humanoid then
		-- capture defaults safely
		defaultWalkSpeed = humanoid.WalkSpeed or defaultWalkSpeed
		if humanoid:GetAttribute("JumpPower") then
			defaultJumpPower = humanoid.JumpPower or defaultJumpPower
		else
			defaultJumpPower = humanoid.JumpPower or defaultJumpPower
		end
	end
end

if plr.Character then
	updateCharacterReferences(plr.Character)
end
plr.CharacterAdded:Connect(function(char)
	updateCharacterReferences(char)
	-- ensure slider UI values reflect new humanoid
	task.defer(function()
		if humanoid and SliderWalkSpeed and SliderJumpPower then
			pcall(function() SliderWalkSpeed:Set(humanoid.WalkSpeed or defaultWalkSpeed) end)
			pcall(function() SliderJumpPower:Set(humanoid.JumpPower or defaultJumpPower) end)
		end
	end)
end)

local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
local gameName = gameInfo.Name
local Window = Rayfield:CreateWindow({
   Name = "GG hub - " .. gameName,
   Icon = 16570037140,
   LoadingTitle = "Loading...",
   LoadingSubtitle = "by DNzinGG",
   ShowText = "GG hub",
   Theme = "Amethyst",
   ToggleUIKeybind = "K",
   DisableRayfieldPrompts = true,
   DisableBuildWarnings = true,
   ConfigurationSaving = {
      Enabled = true,
      FolderName = "GG_hub",
      FileName = "GG hub - Prison Life"
   },
   Discord = {
      Enabled = false,
      Invite = "noinvitelink",
      RememberJoins = true
   }
})

local Main = Window:CreateTab("Main", "rewind")
local Teleports = Window:CreateTab("Teleports", "rewind")
local Others = Window:CreateTab("Others", "rewind")

-- Utility: safe WaitForChild chain
local function safeGet(pathParts, root)
	root = root or workspace
	local cur = root
	for _, part in ipairs(pathParts) do
		if not cur then return nil end
		cur = cur:FindFirstChild(part) or cur:WaitForChild(part, 5)
		if not cur then return nil end
	end
	return cur
end

-- Item pickup functions (use pcall to avoid errors if remote missing)
local function invokeItemHandler(itemPathParts)
	local remote = safeGet({"Remote"}, workspace)
	local item = safeGet(itemPathParts, workspace)
	if not remote or not item then return false, "Remote or item not found" end
	local itemPickup = item:FindFirstChild("ITEMPICKUP") or item:WaitForChild("ITEMPICKUP", 2)
	if not itemPickup then return false, "ITEMPICKUP not found" end
	local success, err = pcall(function()
		remote:WaitForChild("ItemHandler"):InvokeServer(itemPickup)
	end)
	return success, err
end

local function GetAK()
	return invokeItemHandler({"Prison_ITEMS", "giver", "AK-47"})
end

local function GetRemington()
	return invokeItemHandler({"Prison_ITEMS", "giver", "Remington 870"})
	end
-- Buttons / Controls

Main:CreateButton({
	Name = "Become a Inmate",
	Callback = function()
	local args = {
	game:GetService("Teams"):WaitForChild("Neutral")
}
workspace:WaitForChild("Remote"):WaitForChild("TeamEvent"):FireServer(unpack(args))
task.wait()
local args = {
	game:GetService("Teams"):WaitForChild("Inmates")
}
workspace:WaitForChild("Remote"):WaitForChild("TeamEvent"):FireServer(unpack(args))
	end,
})

-- Sliders and default values will reference humanoid; create placeholders to be updated later
local SliderWalkSpeed = Others:CreateSlider({
   Name = "Change WalkSpeed",
   Range = {0, 1000},
   Increment = 1,
   Suffix = "Speed",
   CurrentValue = humanoid.WalkSpeed or defaultWalkSpeed,
   Flag = "SliderWalkSpeed",
   Callback = function(Value)
		if humanoid then
			pcall(function() humanoid.WalkSpeed = Value end)
		elseif plr.Character then
			local h = plr.Character:FindFirstChildWhichIsA("Humanoid")
			if h then pcall(function() h.WalkSpeed = Value end) end
		end
   end,
})

local SliderJumpPower = Others:CreateSlider({
   Name = "Change JumpPower",
   Range = {0, 500},
   Increment = 1,
   Suffix = "JumpPower",
   CurrentValue = humanoid.JumpPower or defaultJumpPower,
   Flag = "SliderJumpPower",
   Callback = function(Value)
		if humanoid then
			pcall(function() humanoid.JumpPower = Value end)
		elseif plr.Character then
			local h = plr.Character:FindFirstChildWhichIsA("Humanoid")
			if h then pcall(function() h.JumpPower = Value end) end
		end
   end,
})

Others:CreateButton({
   Name = "Reset WalkSpeed",
   Callback = function()
		if humanoid then
			pcall(function() humanoid.WalkSpeed = defaultWalkSpeed end)
			pcall(function() SliderWalkSpeed:Set(defaultWalkSpeed) end)
		end
   end,
})

Others:CreateButton({
   Name = "Reset JumpPower",
   Callback = function()
		if humanoid then
			pcall(function() humanoid.JumpPower = defaultJumpPower end)
			pcall(function() SliderJumpPower:Set(defaultJumpPower) end)
		end
   end,
})

-- Infinite Jump: manage connection so we don't leak multiple connections
local infiniteJumpConnection = nil
Others:CreateToggle({
   Name = "Infinite Jump",
   CurrentValue = false,
   Flag = "ToggleInfiniteJump",
   Callback = function(Value)
	   if Value then
		   if infiniteJumpConnection and infiniteJumpConnection.Connected then return end
		   infiniteJumpConnection = UserInputService.JumpRequest:Connect(function()
			   local char = plr.Character
			   if not char then return end
			   local h = char:FindFirstChildWhichIsA("Humanoid")
			   if h then
				   pcall(function() h:ChangeState(Enum.HumanoidStateType.Jumping) end)
			   end
		   end)
	   else
		   if infiniteJumpConnection then
			   pcall(function() infiniteJumpConnection:Disconnect() end)
			   infiniteJumpConnection = nil
		   else
			   -- fallback: disconnect any JumpRequest connections (best-effort)
			   for _, conn in pairs(getconnections(UserInputService.JumpRequest or {})) do
				   pcall(function() conn:Disconnect() end)
			   end
		   end
	   end
   end,
})

Others:CreateButton({
   Name = "Get TP Tool",
   Callback = function()
		local player = plr
		if not player then return end
		local backpack = player:WaitForChild("Backpack")
		if backpack:FindFirstChild("TPTool") then
			backpack.TPTool:Destroy()
		end

		local tool = Instance.new("Tool")
		tool.Name = "TPTool"
		tool.RequiresHandle = false
		tool.CanBeDropped = false
		tool.Parent = backpack

		local soundId = "rbxassetid://9118823109"

		tool.Activated:Connect(function()
			local mouse = player:GetMouse()
			local character = player.Character
			if not character then return end
			local root = character:FindFirstChild("HumanoidRootPart")
			if not root then return end

			local targetPos = mouse.Hit and mouse.Hit.p or nil
			if not targetPos then return end
			targetPos = targetPos + Vector3.new(0, 3, 0)

			local sound = Instance.new("Sound")
			sound.SoundId = soundId
			sound.Volume = 1
			sound.Parent = root
			sound:Play()
			Debris:AddItem(sound, 2)

			root.CFrame = CFrame.new(targetPos)
		end)
   end,
})

Others:CreateButton({
	Name = "Force Reset",
	Callback = function()
		local char = plr.Character
		local h = char and char:FindFirstChildWhichIsA("Humanoid")
		if h then
			pcall(function() h.Health = 0 end)
		end
	end,
})

Main:CreateButton({
  Name = "Become a Criminal",
  Callback = function()
	  local char = plr.Character
	  local hroot = char and char:FindFirstChild("HumanoidRootPart")
	  if hroot then
		  local oldCFrame = hroot.CFrame
		  pcall(function()
			  hroot.CFrame = CFrame.new(-976, 109, 2054)
		  end)
		  task.wait(0.2)
		  pcall(function()
			  if oldCFrame then hroot.CFrame = oldCFrame end
		  end)
	  end
  end,
})

Main:CreateButton({
   Name = "Become a Guard",
    Callback = function()
    local args = {
	game:GetService("Teams"):WaitForChild("Neutral")
}
workspace:WaitForChild("Remote"):WaitForChild("TeamEvent"):FireServer(unpack(args))
task.wait()
		local args = {
	game:GetService("Teams"):WaitForChild("Guards")
}
workspace:WaitForChild("Remote"):WaitForChild("TeamEvent"):FireServer(unpack(args))
    end,
})

Teleports:CreateButton({
   Name = "teleport to the Criminals' base",
   Callback = function()
		local char = plr.Character
		local hroot = char and char:FindFirstChild("HumanoidRootPart")
		if hroot then pcall(function() hroot.CFrame = CFrame.new(-921, 95, 2140) end) end
   end,
})

Teleports:CreateButton({
   Name = "teleport to the Prison Fence",
   Callback = function()
		local char = plr.Character
		local hroot = char and char:FindFirstChild("HumanoidRootPart")
		if hroot then pcall(function() hroot.CFrame = CFrame.new(856, 125, 2591) end) end
   end,
})

Teleports:CreateButton({
   Name = "teleport to the Prison Saddle",
   Callback = function()
		local char = plr.Character
		local hroot = char and char:FindFirstChild("HumanoidRootPart")
		if hroot then pcall(function() hroot.CFrame = CFrame.new(918, 100, 2473) end) end
   end,
})

Teleports:CreateButton({
   Name = "teleport to the City",
   Callback = function()
		local char = plr.Character
		local hroot = char and char:FindFirstChild("HumanoidRootPart")
		if hroot then pcall(function() hroot.CFrame = CFrame.new(-324, 54, 1714) end) end
   end,
})

Main:CreateButton({
   	Name = "Get AK-47",
   Callback = function()
		local char = plr.Character
		local hroot = char and char:FindFirstChild("HumanoidRootPart")
		if not hroot then return end
		local oldCFrame = hroot.CFrame
		pcall(function() hroot.CFrame = CFrame.new(-941, 94, 2056) end)
		task.wait(0.1)
		local ok, err = GetAK()
		task.wait(0.2)
		local hasAK = plr:FindFirstChild("Backpack") and plr.Backpack:FindFirstChild("AK-47") or (plr.Character and plr.Character:FindFirstChild("AK-47"))
		if hasAK then
			task.wait(0.15)
			if oldCFrame and hroot then pcall(function() hroot.CFrame = oldCFrame end) end
		else
			-- try again once
			invokeItemHandler({"Prison_ITEMS", "giver", "AK-47"})
			task.wait(0.15)
			if oldCFrame and hroot then pcall(function() hroot.CFrame = oldCFrame end) end
		end
   end,
})

Main:CreateButton({
   	Name = "Get Remington",
   Callback = function()
		local char = plr.Character
		local hroot = char and char:FindFirstChild("HumanoidRootPart")
		if not hroot then return end
		local oldCFrame = hroot.CFrame
		pcall(function() hroot.CFrame = CFrame.new(-953, 94, 2056) end)
		task.wait(0.1)
		local ok, err = GetRemington()
		task.wait(0.2)
		local hasRem = plr:FindFirstChild("Backpack") and plr.Backpack:FindFirstChild("Remington 870") or (plr.Character and plr.Character:FindFirstChild("Remington 870"))
		if hasRem then
			task.wait(0.15)
			if oldCFrame and hroot then pcall(function() hroot.CFrame = oldCFrame end) end
		else
			-- try again once
			invokeItemHandler({"Prison_ITEMS", "giver", "Remington 870"})
			task.wait(0.15)
			if oldCFrame and hroot then pcall(function() hroot.CFrame = oldCFrame end) end
		end
   end,
})

Others:CreateButton({
	Name = "Fly Gui",
	Callback = function()
		pcall(function()
			loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
		end)
	end,
})
return true
