local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local TS = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")

local char, hum, hrp
local function updateCharacter(c)
    char = c or plr.Character or plr.CharacterAdded:Wait()
    hum = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
end

if plr.Character then updateCharacter(plr.Character) else plr.CharacterAdded:Wait(); updateCharacter(plr.Character) end
plr.CharacterAdded:Connect(updateCharacter)

local defaultWalkSpeed = 28
local defaultJumpPower = 52
getgenv().currentArena = nil

getgenv().SendNotification = function(title, content, duration, image)
if Rayfield then
        Rayfield:Notify({
   Title = title or "GG hub",
   Content = content or "",
   Duration = duration or 3,
   Image = image or 5107182098,
})
end
end

local Window = Rayfield:CreateWindow({
    Name = "GG hub - Tennis Clash",
    Icon = 16570037140,
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by DNzinGG",
    ShowText = "GG hub",
    Theme = "Amethyst",
    ToggleUIKeybind = "K",
    ConfigurationSaving = { Enabled = true, FolderName = "GG_hub", FileName = "GG hub - Tennis Clash" }
})

local Main = Window:CreateTab("Main", 124620632231839)
local Teleports = Window:CreateTab("Teleports", 6723742952)
local Others = Window:CreateTab("Others", 12122755689)

local SliderWalkSpeed = Others:CreateSlider({
    Name = "Change WalkSpeed",
    Range = {0, 1000},
    Increment = 5,
    CurrentValue = hum and hum.WalkSpeed or defaultWalkSpeed,
    Callback = function(Value) if hum then hum.WalkSpeed = Value end end,
})
local SliderJumpPower = Others:CreateSlider({
    Name = "Change JumpPower",
    Range = {0, 1000},
    Increment = 5,
    CurrentValue = hum and hum.JumpPower or defaultJumpPower,
    Callback = function(Value) 
if hum then hum.UseJumpPower = true task.wait() hum.JumpPower = Value end end,
})
Others:CreateButton({ Name = "Reset WalkSpeed", Callback = function() if hum then hum.WalkSpeed = defaultWalkSpeed SliderWalkSpeed:Set(defaultWalkSpeed) end end })
Others:CreateButton({ Name = "Reset JumpPower", Callback = function() if hum then hum.JumpPower = defaultJumpPower SliderJumpPower:Set(defaultJumpPower) end end })

local jumpConnection
Others:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "ToggleInfiniteJump",
    Callback = function(Value)
        if jumpConnection then jumpConnection:Disconnect() end
        if Value then
            jumpConnection = UserInputService.JumpRequest:Connect(function()
                local h = plr.Character and plr.Character:FindFirstChild("Humanoid")
                if h then h:ChangeState(Enum.HumanoidStateType.Jumping) end
            end)
        end
    end,
})

Others:CreateButton({
    Name = "Get TP Tool",
    Callback = function()
        local Backpack = plr:WaitForChild("Backpack")
        if Backpack:FindFirstChild("TPTool") then Backpack.TPTool:Destroy() end
        local tool = Instance.new("Tool")
        tool.Name = "TPTool"
        tool.RequiresHandle = false
        tool.CanBeDropped = false
        tool.Parent = Backpack
        local soundId = "rbxassetid://9118823109"
        tool.Activated:Connect(function()
            local mouse = plr:GetMouse()
            local root = char and char:FindFirstChild("HumanoidRootPart")
            if not root then return end
            local targetPos = mouse.Hit.Position + Vector3.new(0,3,0)
            local sound = Instance.new("Sound")
            sound.SoundId = soundId
            sound.Volume = 1
            sound.Parent = root
            sound:Play()
            Debris:AddItem(sound, 2)
            root.CFrame = CFrame.new(targetPos)
        end)
    end,
})

Others:CreateButton({ Name = "Force Reset", Callback = function() local h = char and char:FindFirstChildOfClass("Humanoid"); if h then h.Health = 0 end end })
Others:CreateButton({ Name = "Fly Gui", Callback = function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))() end) end })

local ToggleNoClip = Others:CreateToggle({
	Name = "No Clip",
	CurrentValue = false,
	Flag = "TogleNoClip",
	Callback = function(Value)
	getgenv().noClip = Value
	
	while noClip do task.wait(0.0001)
	for _,v in pairs(char:GetChildren()) do
	if v:IsA("MeshPart") or v:IsA("Part") and v.Name ~= HumanoidRootPart then
	if noClip then
	v.CanCollide = false
	else
	v.CanCollide = true
	end
	end
	end
	end
	end,
})

local ButtonTeleportToLobby = Teleports:CreateButton({
	Name = "Teleport To Lobby",
	Callback = function()
	hrp.CFrame = CFrame.new(2906, 35, -2995) + Vector3.new(0, 3, 0)
	end,
})

local ToggleAutoThrow = Main:CreateToggle({
	Name = "Auto Throw",
	CurrentValue = false,
	Flag = "ToggleAutoThrow",
	Callback = function(Value)
	getgenv().autoThrow = Value
	
	while getgenv().autoThrow do task.wait(0.1)
	local args = {
	{
		CamPos = vector.create(9183.220703125, 21.282329559326172, -2934.73583984375),
		HitPos = vector.create(9165.1484375, 13.781553268432617, -2986.181396484375),
		HitBallType = 1,
		ClientTick = 1759944855.056984,
		CamDir = vector.create(-0.42616772651672363, -0.2256360799074173, -0.8760533332824707),
		AttackMoveSpeed = vector.create(-1.292837142944336, 0, -34.34698486328125)
	}
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("HitBallRF"):InvokeServer(unpack(args))
end
	end,
})

local DropdownSelectCourt = Teleports:CreateDropdown({
	Name = "Select Arena",
	Options = {"Arena1","Arena2","Arena3","Arena4","Arena5","Arenas"},
	CurrentOption = nil,
	Callback = function(Option)
	        if type(Option) == "table" then Option = Option[1] end
        getgenv().currentArena = Option or nil
	end,
})

local ButtonTeleportToCourt = Teleports:CreateButton({
	Name = "Teleport to Arena",
	Callback = function()
	SendNotification("GG hub", "In Development...", 3)
	
	if getgenv().currentArena ~= nil then
	print("a")
	else
	print("b")
	end
	end,
})

local ToggleAutoPerfectWithdraw = Main:CreateToggle({
	Name = "Auto Perfect Throw(BETA)",
	CurrentValue = false,
	Flag = "ToggleAutoPerfectThrow",
	Callback = function(Value)
	getgenv().AutoPerfect = Value
	
	if getgenv().AutoPerfect then
	SendNotification("GG hub", "This function may not work properly.", 3)
	end
	
	while AutoPerfect do task.wait(0.1)
	local args = {
	{
		CamPos = vector.create(12601.3662109375, 34.332061767578125, -2902.32275390625),
		HitPos = vector.create(12594.626953125, 25.425382614135742, -2939.28076171875),
		HitBallType = 2,
		ClientTick = 1759960758.501703,
		CamDir = vector.create(-0.2098981887102127, -0.3811514973640442, -0.900370180606842),
		ExtendParams = {
			RotateType = -1,
			Power = 91.21489228631319
		},
		AttackMoveSpeed = vector.zero
	}
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("HitBallRF"):InvokeServer(unpack(args))
	end
	end,
})

local ToggleAutoWithdraw = Main:CreateToggle({
Name = "Auto Withdraw",
CurrentValue = false,
Flag = "ToggleAutoWithdraw",
Callback = function(Value)
getgenv().autoWithdraw = Value
while autoWithdraw do task.wait(0.01)
local args = {
	{
		RotateType = -1,
		Power = 84.60108185511048
	}
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("ServeRF"):InvokeServer(unpack(args))
end
end,
})
