local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local TS = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local char, hum, hrp
local function updateCharacter(c)
	char = c or plr.Character or plr.CharacterAdded:Wait()
	hum = char:WaitForChild("Humanoid")
	hrp = char:WaitForChild("HumanoidRootPart")
end
if plr.Character then updateCharacter(plr.Character) else plr.CharacterAdded:Wait(); updateCharacter(plr.Character) end
plr.CharacterAdded:Connect(updateCharacter)

local defaultWalkSpeed = 18
local defaultJumpPower = 50
getgenv().currentWalkSpeed = 18
getgenv().currentArea = nil
getgenv().currentEgg = {}

getgenv().SendNotification = function(title, content, duration, image)
	if Rayfield then
		Rayfield:Notify({
			Title = title or "GG hub",
			Content = content or "",
			Duration = duration or 3,
			Image = image or 5107182098,
		})
	end
end

local gameInfo = game:GetService("MarketplaceService"):GetProductInfo(game.PlaceId)
local gameName = gameInfo.Name
local Window = Rayfield:CreateWindow({
	Name = "GG hub - " .. gameName,
	Icon = 16570037140,
	LoadingTitle = "Loading...",
	LoadingSubtitle = "by DNzinGG",
	ShowText = "GG hub",
	Theme = "Amethyst",
	ToggleUIKeybind = "K",
	DisableRayfieldPrompts = true,
	DisableBuildWarnings = true,
	ConfigurationSaving = { Enabled = true, FolderName = "GG_hub", FileName = "GG hub - Just a single Simulator" }
})

local Main = Window:CreateTab("Main", 124620632231839)
local MainOther = Window:CreateTab("MainOther", 127961652457612)
local Teleports = Window:CreateTab("Teleports", 6723742952)
local Others = Window:CreateTab("Others", 12122755689)

local SliderWalkSpeed = Others:CreateSlider({
	Name = "Change WalkSpeed",
	Range = {0, 1000},
	Increment = 5,
	CurrentValue = defaultWalkSpeed,
	Callback = function(v)
		getgenv().currentWalkSpeed = v
	end,
})

local InputWalkSpeed = Others:CreateInput({
	Name = "Input WalkSpeed",
	CurrentValue = tostring(defaultWalkSpeed),
	PlaceholderText = tostring(defaultWalkSpeed),
	RemoveTextAfterFocusLost = false,
	Flag = "InputWalkSpeed",
	Callback = function(Text)
		local num = tonumber(Text)
		if num then
			if num <= 1000 then
				getgenv().currentWalkSpeed = num
			else
				SendNotification("GG hub", "The maximum value is 1000!", 2)
			end
		else
			SendNotification("GG hub", "Invalid WalkSpeed value, use numbers!", 2)
		end
	end,
})

task.spawn(function()
	while task.wait(0.05) do
		if hum then
			pcall(function()
				hum.WalkSpeed = tonumber(getgenv().currentWalkSpeed) or defaultWalkSpeed
			end)
		end
	end
end)

local SliderJumpPower = Others:CreateSlider({
	Name = "Change JumpPower",
	Range = {0, 1000},
	Increment = 5,
	CurrentValue = defaultJumpPower,
	Callback = function(Value)
		if hum then
			hum.UseJumpPower = true
			hum.JumpPower = Value
		end
	end,
})

local InputJumpPower = Others:CreateInput({
	Name = "Input JumpPower",
	CurrentValue = tostring(defaultJumpPower),
	PlaceholderText = tostring(defaultJumpPower),
	RemoveTextAfterFocusLost = false,
	Flag = "InputJumpPower",
	Callback = function(Text)
		local num = tonumber(Text)
		if num then
			if num <= 1000 then
				getgenv().currentJumpPower = num
				if hum then hum.JumpPower = num end
			else
				SendNotification("GG hub", "The maximum value is 1000!", 2)
			end
		else
			SendNotification("GG hub", "Invalid JumpPower value, use numbers!", 2)
		end
	end,
})

Others:CreateButton({ Name = "Reset WalkSpeed", Callback = function() if hum then hum.WalkSpeed = defaultWalkSpeed SliderWalkSpeed:Set(defaultWalkSpeed) InputWalkSpeed:Set(tostring(defaultWalkSpeed)) end end })
Others:CreateButton({ Name = "Reset JumpPower", Callback = function() if hum then hum.JumpPower = defaultJumpPower SliderJumpPower:Set(defaultJumpPower) InputJumpPower:Set(tostring(defaultJumpPower)) end end })

local jumpConnection
Others:CreateToggle({
	Name = "Infinite Jump",
	CurrentValue = false,
	Flag = "ToggleInfiniteJump",
	Callback = function(Value)
		if jumpConnection then jumpConnection:Disconnect() end
		if Value then
			jumpConnection = UserInputService.JumpRequest:Connect(function()
				local h = plr.Character and plr.Character:FindFirstChild("Humanoid")
				if h then h:ChangeState(Enum.HumanoidStateType.Jumping) end
			end)
		end
	end,
})

Others:CreateButton({
	Name = "Get TP Tool",
	Callback = function()
		local Backpack = plr:WaitForChild("Backpack")
		if Backpack:FindFirstChild("TPTool") then Backpack.TPTool:Destroy() end
		local tool = Instance.new("Tool")
		tool.Name = "TPTool"
		tool.RequiresHandle = false
		tool.CanBeDropped = false
		tool.Parent = Backpack
		local soundId = "rbxassetid://9118823109"
		tool.Activated:Connect(function()
			local mouse = plr:GetMouse()
			local root = char and char:FindFirstChild("HumanoidRootPart")
			if not root then return end
			local targetPos = mouse.Hit.Position + Vector3.new(0,3,0)
			local sound = Instance.new("Sound")
			sound.SoundId = soundId
			sound.Volume = 1
			sound.Parent = root
			sound:Play()
			Debris:AddItem(sound, 2)
			root.CFrame = CFrame.new(targetPos)
		end)
	end,
})

Others:CreateButton({ Name = "Force Reset", Callback = function() local h = char and char:FindFirstChildOfClass("Humanoid"); if h then h.Health = 0 end end })
Others:CreateButton({ Name = "Fly Gui", Callback = function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))() end) end })

Others:CreateToggle({
	Name = "No Clip",
	CurrentValue = false,
	Flag = "ToggleNoClip",
	Callback = function(Value)
		getgenv().noClip = Value
		task.spawn(function()
			while getgenv().noClip do task.wait(0.05)
				if char then
					for _, v in pairs(char:GetChildren()) do
						if (v:IsA("MeshPart") or v:IsA("Part")) then
							v.CanCollide = not getgenv().noClip
						end
					end
				end
			end
		end)
	end,
})

Main:CreateToggle({
	Name = "Auto Lollipop",
	CurrentValue = false,
	Flag = "ToggleAutoLollipop",
	Callback = function(Value)
		getgenv().AutoClick = Value
		task.spawn(function()
			while getgenv().AutoClick do
				task.wait(0.00001)
				pcall(function()
					ReplicatedStorage.Remotes.Clicker:FireServer()
				end)
			end
		end)
	end,
})

Main:CreateToggle({
	Name = "Auto Rebirth",
	CurrentValue = false,
	Flag = "ToggleAutoRebirth",
	Callback = function(Value)
		getgenv().autoRebirth = Value
		task.spawn(function()
			while getgenv().autoRebirth do
				task.wait(0.3)
				pcall(function()
					ReplicatedStorage.Remotes.Rebirth:FireServer()
				end)
			end
		end)
	end,
})

Main:CreateToggle({
	Name = "Auto Equip Best Pets(BETA)",
	CurrentValue = false,
	Flag = "ToggleAutoEquipBestPets",
	Callback = function(Value)
		getgenv().autoEquip = Value
		if Value then
			SendNotification("GG hub", "This function may not work properly!", 2.3)
			task.spawn(function()
				while getgenv().autoEquip do
					task.wait(3)
					local petsFolder = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("Pets")
					local petsStorage = ReplicatedStorage:FindFirstChild("Pets")
					if not petsFolder or not petsStorage then continue end
					local petsList = {}
					for _, playerPet in ipairs(petsFolder:GetChildren()) do
						local petNameValue = playerPet:FindFirstChild("PetName")
						if petNameValue then
							local petName = petNameValue.Value
							local replicatedPet = petsStorage:FindFirstChild(petName)
							if replicatedPet and replicatedPet:FindFirstChild("Settings") then
								local multiplier = replicatedPet.Settings:FindFirstChild("Multiplier")
								if multiplier then
									table.insert(petsList, { Id = playerPet.Name, Name = petName, Multiplier = tonumber(multiplier.Value) })
								end
							end
						end
					end
					table.sort(petsList, function(a, b) return a.Multiplier > b.Multiplier end)
					if #petsList == 0 then continue end
					local maxEquips = 5
					for i = 1, math.min(maxEquips, #petsList) do
						local pet = petsList[i]
						pcall(function()
							ReplicatedStorage.Remotes.Pet:FireServer("Equip", {tostring(pet.Id)})
						end)
					end
				end
			end)
		end
	end,
})

Main:CreateToggle({
	Name = "Auto Equip Pets(Random)",
	CurrentValue = false,
	Flag = "ToggleAutoEquipPets(Random)",
	Callback = function(Value)
		getgenv().autoPet = Value
		task.spawn(function()
			while getgenv().autoPet do
				task.wait(1)
				for _,v in pairs(plr.Data.Pets:GetChildren()) do
					if v:IsA("Folder") then
						pcall(function()
							ReplicatedStorage.Remotes.Pet:FireServer("Equip",{tostring(v)})
						end)
					end
				end
			end
		end)
	end,
})

local ToggleAutoUnlockAreas = Main:CreateToggle({
	Name = "Auto Unlock Areas",
	CurrentValue = false,
	Flag = "ToggleAutoUnlockAreas",
	Callback = function(Value)
	getgenv().autoArea = Value
	
	while autoArea do task.wait(0.55)
	game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("Area"):FireServer()
	end
	end,
})

Main:CreateButton({
	Name = "Unlock All Areas",
	Callback = function()
		for _,v in pairs(workspace.Map:GetChildren()) do
			if v.Name == "Doors" then v:Destroy() end
		end
	end,
})

local function GetAreas()
	local areas = {}
	for _, v in ipairs(Workspace.Map:GetChildren()) do
		if v:IsA("Folder") and v:FindFirstChild("Ground") then table.insert(areas, v.Name) end
	end
	if #areas == 0 then table.insert(areas, nil) end
	return areas
end

local DropdownSelectArea = Teleports:CreateDropdown({
	Name = "Select Area",
	Options = GetAreas(),
	CurrentOption = nil,
	Flag = "DropdownSelectArea",
	Callback = function(Option)
		if type(Option) == "table" then Option = Option[1] end
		getgenv().currentArea = Option or nil
	end,
})

Teleports:CreateButton({
	Name = "TeleportToArea",
	Callback = function()
		if getgenv().currentArea ~= nil then
			for _,v in pairs(game.Workspace.Map:GetChildren()) do
				if v.Name == getgenv().currentArea then
					local part = v.Ground:FindFirstChildOfClass("Part") or v.Ground
					hrp.CFrame = part.CFrame + Vector3.new(0, 3, 0)
				end
			end
		end
	end,
})

local function GetEggs()
	local eggs = {}
	for _, v in ipairs(ReplicatedStorage:WaitForChild("Eggs"):GetChildren()) do
		if v:IsA("Folder") then table.insert(eggs, v.Name) end
	end
	return eggs
end

Main:CreateDropdown({
	Name = "Select Egg",
	Options = GetEggs(),
	CurrentOption = {},
	MultipleOptions = true,
	Flag = "DropdownSelectEgg",
	Callback = function(Option)
		if typeof(Option) == "table" then
			getgenv().currentEgg = Option
		else
			getgenv().currentEgg = { Option }
		end
	end,
})

Main:CreateToggle({
	Name = "Auto Open Egg",
	CurrentValue = false,
	Flag = "ToggleAutoOpenEgg",
	Callback = function(Value)
		getgenv().autoEgg = Value
		if Value then
			if not getgenv().currentEgg or #getgenv().currentEgg == 0 then
				SendNotification("GG hub", "Select at least one egg first!", 2)
				return
			end
			task.spawn(function()
				while getgenv().autoEgg do
					task.wait(0.5)
					for _, eggName in ipairs(getgenv().currentEgg) do
						local eggsFolder = Workspace:WaitForChild("Map"):FindFirstChild("Eggs")
						if eggsFolder then
							local egg = eggsFolder:FindFirstChild(eggName)
							if egg then
								pcall(function()
									ReplicatedStorage.Remotes.Egg:InvokeServer(tostring(egg.Name), 1)
								end)
							end
						end
					end
				end
			end)
		end
	end,
})

local ButtonDestroyAllInvisibleWalls = Others:CreateButton({
	Name = "Destroy All Invisible Walls",
	Callback = function()
	local destroyed = false
	
	if not destroyed then
for i,v in pairs(game.Workspace.Map:GetDescendants()) do
if v.Name == "InvisibleWalls" and v:IsA("Folder") then
v:Destroy()
local destroyed = true
SendNotification("Sucess", "All walls have been successfully removed!", 2)
end
end
else
SendNotification("GG hub", "You've already removed all the walls!", 2)
end
	end,
})

local ButtonDestroyGui = Others:CreateButton({
	Name = "Destroy Gui",
	Callback = function()
	Rayfield:Destroy()
	end,
})

local ToggleAutoUpgradeMoreLollipop = MainOther:CreateToggle({
	Name = "Auto Upgrade More Lollipop",
	CurrentValue = false,
	Flag = "ToggleAutoUpgradeMoreLollipop",
	Callback = function(Value)
	getgenv().autoUpgrade = Value
	
	while autoUpgrade do task.wait(0.3)
	local args = {
	"2"
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("GemUpgrade"):FireServer(unpack(args))
	end
	end,
})

local ToggleAutoUpgradeMoreWalkSpeed = MainOther:CreateToggle({
	Name = "Auto Upgrade More WalkSpeed",
	CurrentValue = false,
	Flag = "ToggleAutoUpgradeMoreWalkSpeed",
	Callback = function(Value)
	getgenv().autoUpgrade = Value
	
	while autoUpgrade do task.wait(0.3)
	local args = {
	"1"
}
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("GemUpgrade"):FireServer(unpack(args))
	end
	end,
})

local ToggleAutoDeleteBadPets = MainOther:CreateToggle({
	Name = "Auto Delete Bad Pets",
	CurrentValue = false,
	Flag = "ToggleAutoDeleteBadPets",
	Callback = function(Value)
		getgenv().AutoDelete = Value
		task.spawn(function()
			while getgenv().AutoDelete do
				task.wait(2)
				local petsFolder = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("Pets")
				local petsStorage = ReplicatedStorage:FindFirstChild("Pets")
				if not petsFolder or not petsStorage then continue end
				local petsList = {}
				for _, playerPet in ipairs(petsFolder:GetChildren()) do
					local petNameValue = playerPet:FindFirstChild("PetName")
					if petNameValue then
						local petName = petNameValue.Value
						local replicatedPet = petsStorage:FindFirstChild(petName)
						if replicatedPet and replicatedPet:FindFirstChild("Settings") then
							local multiplier = replicatedPet.Settings:FindFirstChild("Multiplier")
							if multiplier then
								table.insert(petsList, { Id = playerPet.Name, Name = petName, Multiplier = tonumber(multiplier.Value) })
							end
						end
					end
				end
				table.sort(petsList, function(a, b) return a.Multiplier > b.Multiplier end)
				if #petsList == 0 then continue end
				local keepCount = math.min(5, #petsList)
				local petsToDelete = {}
				for i = keepCount + 1, #petsList do
					table.insert(petsToDelete, tostring(petsList[i].Id))
				end
				if #petsToDelete > 0 then
					pcall(function()
						ReplicatedStorage.Remotes.Pet:FireServer("Delete", petsToDelete)
					end)
				end
			end
		end)
	end,
})

local ToggleAutoDeleteAllPets = MainOther:CreateToggle({
	Name = "Auto Delete All Pets",
	CurrentValue = false,
	Flag = "ToggleAutoDeleteAllPets",
	Callback = function(Value)
		getgenv().AutoDeleteAll = Value
		task.spawn(function()
			while getgenv().AutoDeleteAll do
				task.wait(1)
				local petsFolder = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("Pets")
				if not petsFolder then continue end
				local petsToDelete = {}
				for _, pet in ipairs(petsFolder:GetChildren()) do
					table.insert(petsToDelete, tostring(pet.Name))
				end
				if #petsToDelete > 0 then
					pcall(function()
						ReplicatedStorage.Remotes.Pet:FireServer("Delete", petsToDelete)
					end)
				end
			end
		end)
	end,
})

local GetAllGamepass = MainOther:CreateButton({
	Name = "Get All Gamepass",
	Callback = function()
		local obtained = {}
		local alreadyOwned = {}
		for _, v in pairs(plr.Data.Gamepasses:GetChildren()) do
			if v:IsA("BoolValue") then
				if not v.Value then
					v.Value = true
					table.insert(obtained, v.Name)
				else
					table.insert(alreadyOwned, v.Name)
				end
			end
		end
		if #obtained > 0 then
			SendNotification("Success", "Obtained gamepasses: " .. table.concat(obtained, ", "), 3)
		elseif #alreadyOwned > 0 then
			SendNotification("GG hub", "You already have all the gamepasses!", 2.5)
		else
			SendNotification("GG hub", "No gamepasses found to obtain.", 2.5)
		end
	end,
})

Rayfield:LoadConfiguration()
