local Rayfield = loadstring(game:HttpGet("https://sirius.menu/rayfield"))()
local Players = game:GetService("Players")
local plr = Players.LocalPlayer
local TS = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local Workspace = game:GetService("Workspace")
local UserInputService = game:GetService("UserInputService")
local Debris = game:GetService("Debris")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local char, hum, hrp
local function updateCharacter(c)
    char = c or plr.Character or plr.CharacterAdded:Wait()
    hum = char:WaitForChild("Humanoid")
    hrp = char:WaitForChild("HumanoidRootPart")
end

if plr.Character then updateCharacter(plr.Character) else plr.CharacterAdded:Wait(); updateCharacter(plr.Character) end
plr.CharacterAdded:Connect(updateCharacter)

local defaultWalkSpeed = 18
local defaultJumpPower = 50
getgenv().currentWalkSpeed = 18
getgenv().currentArea = nil

getgenv().SendNotification = function(title, content, duration, image)
    if Rayfield then
        Rayfield:Notify({
            Title = title or "GG hub",
            Content = content or "",
            Duration = duration or 3,
            Image = image or 5107182098,
        })
    end
end

local Window = Rayfield:CreateWindow({
    Name = "GG hub - Just a single Simulator",
    Icon = 16570037140,
    LoadingTitle = "Loading...",
    LoadingSubtitle = "by DNzinGG",
    ShowText = "GG hub",
    Theme = "Amethyst",
    ToggleUIKeybind = "K",
    DisableRayfieldPrompts = true,
   DisableBuildWarnings = true,
    ConfigurationSaving = { Enabled = true, FolderName = "GG_hub", FileName = "GG hub - Just a single Simulator" }
})

local Main = Window:CreateTab("Main", 124620632231839)
local Teleports = Window:CreateTab("Teleports", 6723742952)
local Others = Window:CreateTab("Others", 12122755689)

local SliderWalkSpeed = Others:CreateSlider({
    Name = "Change WalkSpeed",
    Range = {0, 1000},
    Increment = 5,
    CurrentValue = defaultWalkSpeed,
    Callback = function(v)
        getgenv().currentWalkSpeed = v
    end,
})

task.spawn(function()
    while task.wait(0.0001) do
        if hum then
            pcall(function()
                hum.WalkSpeed = tonumber(getgenv().currentWalkSpeed) or defaultWalkSpeed
            end)
        end
    end
end)

local SliderJumpPower = Others:CreateSlider({
    Name = "Change JumpPower",
    Range = {0, 1000},
    Increment = 5,
    CurrentValue = defaultJumpPower,
    Callback = function(Value)
        if hum then
            hum.UseJumpPower = true
            task.wait()
            hum.JumpPower = Value
        end
    end,
})

Others:CreateButton({ Name = "Reset WalkSpeed", Callback = function() if hum then hum.WalkSpeed = defaultWalkSpeed SliderWalkSpeed:Set(defaultWalkSpeed) end end })
Others:CreateButton({ Name = "Reset JumpPower", Callback = function() if hum then hum.JumpPower = defaultJumpPower SliderJumpPower:Set(defaultJumpPower) end end })

local jumpConnection
Others:CreateToggle({
    Name = "Infinite Jump",
    CurrentValue = false,
    Flag = "ToggleInfiniteJump",
    Callback = function(Value)
        if jumpConnection then jumpConnection:Disconnect() end
        if Value then
            jumpConnection = UserInputService.JumpRequest:Connect(function()
                local h = plr.Character and plr.Character:FindFirstChild("Humanoid")
                if h then h:ChangeState(Enum.HumanoidStateType.Jumping) end
            end)
        end
    end,
})

Others:CreateButton({
    Name = "Get TP Tool",
    Callback = function()
        local Backpack = plr:WaitForChild("Backpack")
        if Backpack:FindFirstChild("TPTool") then Backpack.TPTool:Destroy() end
        local tool = Instance.new("Tool")
        tool.Name = "TPTool"
        tool.RequiresHandle = false
        tool.CanBeDropped = false
        tool.Parent = Backpack
        local soundId = "rbxassetid://9118823109"
        tool.Activated:Connect(function()
            local mouse = plr:GetMouse()
            local root = char and char:FindFirstChild("HumanoidRootPart")
            if not root then return end
            local targetPos = mouse.Hit.Position + Vector3.new(0,3,0)
            local sound = Instance.new("Sound")
            sound.SoundId = soundId
            sound.Volume = 1
            sound.Parent = root
            sound:Play()
            Debris:AddItem(sound, 2)
            root.CFrame = CFrame.new(targetPos)
        end)
    end,
})

Others:CreateButton({ Name = "Force Reset", Callback = function() local h = char and char:FindFirstChildOfClass("Humanoid"); if h then h.Health = 0 end end })
Others:CreateButton({ Name = "Fly Gui", Callback = function() pcall(function() loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))() end) end })

local ToggleNoClip = Others:CreateToggle({
	Name = "No Clip",
	CurrentValue = false,
	Flag = "ToggleNoClip",
	Callback = function(Value)
		getgenv().noClip = Value
		task.spawn(function()
			while noClip do task.wait(0.001)
				if char then
					for _, v in pairs(char:GetChildren()) do
						if (v:IsA("MeshPart") or v:IsA("Part")) then
							v.CanCollide = not noClip
						end
					end
				end
			end
		end)
	end,
})

local ToggleAutoLollipop = Main:CreateToggle({
	Name = "Auto Lollipop",
	CurrentValue = false,
	Flag = "ToggleAutoLollipop",
	Callback = function(Value)
	    getgenv().AutoClick = Value
	    while AutoClick do task.wait(0.00001)
	        ReplicatedStorage.Remotes.Clicker:FireServer()
	    end
	end,
})

local ToggleAutoRebirth = Main:CreateToggle({
	Name = "Auto Rebirth",
	CurrentValue = false,
	Flag = "ToggleAutoRebirth",
	Callback = function(Value)
	    getgenv().autoRebirth = Value
	    while autoRebirth do task.wait(0.3)
	        ReplicatedStorage.Remotes.Rebirth:FireServer()
	    end
	end,
})

local ToggleAutoEquipBestPets = Main:CreateToggle({
	Name = "Auto Equip Best Pets(BETA)",
	CurrentValue = false,
	Flag = "ToggleAutoEquipBestPets",
	Callback = function(Value)
	if Value then
	SendNotification("GG hub", "This function may not work properly!", 2.3)
	end
		getgenv().autoEquip = Value
		task.spawn(function()
			while true do
				task.wait(5)
				if not autoEquip then break end
				local petsFolder = plr:FindFirstChild("Data") and plr.Data:FindFirstChild("Pets")
				local petsStorage = game:GetService("ReplicatedStorage"):FindFirstChild("Pets")
				if not petsFolder or not petsStorage then
					continue
				end
				local petsList = {}
				for _, playerPet in ipairs(petsFolder:GetChildren()) do
					local petNameValue = playerPet:FindFirstChild("PetName")
					if petNameValue then
						local petName = petNameValue.Value
						local replicatedPet = petsStorage:FindFirstChild(petName)
						if replicatedPet and replicatedPet:FindFirstChild("Settings") then
							local multiplier = replicatedPet.Settings:FindFirstChild("Multiplier")
							if multiplier then
								table.insert(petsList, {
									Id = playerPet.Name,
									Name = petName,
									Multiplier = tonumber(multiplier.Value)
								})
							end
						end
					end
				end
				table.sort(petsList, function(a, b)
					return a.Multiplier > b.Multiplier
				end)
				if #petsList == 0 then
					continue
				end
				local maxEquips = 6
				for i = 1, math.min(maxEquips, #petsList) do
					local pet = petsList[i]
					local args = {"Equip", {tostring(pet.Id)}}
					game:GetService("ReplicatedStorage").Remotes.Pet:FireServer(unpack(args))
				end
			end
		end)
	end,
})

local ToggleAutoEquipPets = Main:CreateToggle({
	Name = "Auto Equip Pets(Random)",
	CurrentValue = false,
	Flag = "ToggleAutoEquipPets(Random)",
	Callback = function(Value)
	    getgenv().autoPet = Value
	    while autoPet do task.wait(0.66)
	        for i,v in pairs(plr.Data.Pets:GetChildren()) do
	            if v:IsA("Folder") then
	                ReplicatedStorage.Remotes.Pet:FireServer("Equip",{tostring(v)})
	            end
	        end
	    end
	end,
})

local ButtonUnlockAllAreas = Main:CreateButton({
	Name = "Unlock All Areas",
	Callback = function()
	    for i,v in pairs(workspace.Map:GetChildren()) do
	        if v.Name == "Doors" then
	            v:Destroy()
	        end
	    end
	end,
})

local function GetAreas()
    local areas = {}
    for _, v in ipairs(Workspace.Map:GetChildren()) do
        if v:IsA("Folder") and v:FindFirstChild("Ground") then table.insert(areas, v.Name) end
    end
    if #areas == 0 then table.insert(areas, nil) end
    return areas
end

local DropdownSelectArea = Teleports:CreateDropdown({
	Name = "Select Area",
	Options = GetAreas(),
	CurrentOption = nil,
	Flag = "DropdownSelectArea",
	Callback = function(Option)
	    if type(Option) == "table" then Option = Option[1] end
        getgenv().currentArea = Option or nil
	end,
})

local ButtonTeleportToArea = Teleports:CreateButton({
	Name = "TeleportToArea",
	Callback = function()
	    if getgenv().currentArea ~= nil then
	        for _,v in pairs(game.Workspace.Map:GetChildren()) do
	            if v.Name == getgenv().currentArea then
	                local part = v.Ground:FindFirstChildOfClass("Part") or v.Ground
	                hrp.CFrame = part.CFrame + Vector3.new(0, 3, 0)
	            end
	        end
	    end
	end,
})

Rayfield:LoadConfiguration()
